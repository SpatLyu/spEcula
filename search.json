[{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"load-data-and-package","dir":"Articles","previous_headings":"","what":"Load data and package","title":"Geographically Optimal Similarity Model","text":"use zn data train gos model,use grid data predict. Data summary Variable type: numeric Data summary Variable type: numeric","code":"library(spEcula) data(zn) data(grid)  skimr::skim(zn) skimr::skim(grid)"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"data-pre-processing-and-variable-selection","dir":"Articles","previous_headings":"","what":"Data pre-processing and variable selection","title":"Geographically Optimal Similarity Model","text":"use zn data grid data o predict Zn scope grid data. ,can see zn variable Zn data skewed (right skewed),Let’s normality test . Shapiro-Wilk normality test \\(\\text{p-value} < 2.2e-16 << 0.05\\) W value \\(0.84834\\), can conclude high confidence zn variable Zn data follow normal distribution. Now,transform zn variable Zn data,use Power Transform method.(ps: can also use log-transformation). Power Transform uses maximum likelihood-like approach Box Cox (1964) select transformation univariate multivariate response normality. First calculate appropriate transformation parameters using powerTransform() function car package use parameter transform data using bcPower() function. Now, let’s see transformed zn variable Zn data see skewness:  right, let’s move next step see variable correlation:  test multicollinearity use vif: step, selected variables include Slope, Water, NDVI, SOC, pH, Road, Mine.","code":"moments::skewness(zn$Zn) ## [1] 1.414892 shapiro.test(zn$Zn) ##  ##  Shapiro-Wilk normality test ##  ## data:  zn$Zn ## W = 0.84834, p-value < 2.2e-16 lambdapt = car::powerTransform(zn$Zn) lambdapt ## Estimated transformation parameter  ##       zn$Zn  ## -0.02447525 zn$Zn = car::bcPower(zn$Zn,lambdapt$lambda) hist(zn$Zn) moments::skewness(zn$Zn) ## [1] 0.004367706 PerformanceAnalytics::chart.Correlation(zn[, c(3:12)],pch = 19) m1 = lm(Zn ~ Slope + Water + NDVI + SOC + pH + Road + Mine, data = zn) car::vif(m1) ##    Slope    Water     NDVI      SOC       pH     Road     Mine  ## 1.651039 1.232454 1.459539 1.355824 1.568347 2.273387 2.608347"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"determining-the-optimal-similarity","dir":"Articles","previous_headings":"","what":"Determining the optimal similarity","title":"Geographically Optimal Similarity Model","text":"can set optional numbers kappa vector higher value cross-validation repeat times nrepeat multi-core parallel(set cores bigger).","code":"tictoc::tic() b1 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                    data = zn,kappa = c(seq(0.01, 0.1, 0.01), seq(0.2, 1, 0.1)),                    nrepeat = 10,nsplit = .8,cores = 1) tictoc::toc() ## 30.13 sec elapsed b1$bestkappa ## [1] 0.07 b1$cvmean ## # A tibble: 19 × 2 ##    kappa  rmse ##    <dbl> <dbl> ##  1  0.01 0.610 ##  2  0.02 0.602 ##  3  0.03 0.597 ##  4  0.04 0.596 ##  5  0.05 0.594 ##  6  0.06 0.594 ##  7  0.07 0.594 ##  8  0.08 0.594 ##  9  0.09 0.594 ## 10  0.1  0.594 ## 11  0.2  0.594 ## 12  0.3  0.594 ## 13  0.4  0.594 ## 14  0.5  0.594 ## 15  0.6  0.594 ## 16  0.7  0.594 ## 17  0.8  0.594 ## 18  0.9  0.594 ## 19  1    0.594 b1$plot tictoc::tic() b2 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                    data = zn,kappa = c(seq(0.01, 0.1, 0.01), seq(0.2, 1, 0.1)),                    nrepeat = 10,nsplit = .8,cores = 6) tictoc::toc() ## 10.65 sec elapsed b2$bestkappa ## [1] 0.07 b2$cvmean ## # A tibble: 19 × 2 ##    kappa  rmse ##    <dbl> <dbl> ##  1  0.01 0.610 ##  2  0.02 0.602 ##  3  0.03 0.597 ##  4  0.04 0.596 ##  5  0.05 0.594 ##  6  0.06 0.594 ##  7  0.07 0.594 ##  8  0.08 0.594 ##  9  0.09 0.594 ## 10  0.1  0.594 ## 11  0.2  0.594 ## 12  0.3  0.594 ## 13  0.4  0.594 ## 14  0.5  0.594 ## 15  0.6  0.594 ## 16  0.7  0.594 ## 17  0.8  0.594 ## 18  0.9  0.594 ## 19  1    0.594 b2$plot"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"spatial-prediction-use-gos-model","dir":"Articles","previous_headings":"","what":"Spatial prediction use GOS model","title":"Geographically Optimal Similarity Model","text":"back transformation using transformation parameters used Box-cos transformation show result","code":"tictoc::tic() g = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,         data = zn, newdata = grid, kappa = 0.07,cores = 6) tictoc::toc() ## 10.92 sec elapsed grid$pred = inverse_bcPower(g$pred,lambdapt$lambda) grid$uc99 = g$`uncertainty99` library(ggplot2) library(viridis) ## Loading required package: viridisLite library(cowplot)  f1 = ggplot(grid, aes(x = Lon, y = Lat, fill = pred)) +   geom_tile() +   scale_fill_viridis(option=\"magma\", direction = -1) +   coord_equal() +   labs(fill='Prediction') +   theme_bw() f2 = ggplot(grid, aes(x = Lon, y = Lat, fill = uc99)) +   geom_tile() +   scale_fill_viridis(option=\"mako\", direction = -1) +   coord_equal() +   labs(fill=bquote(Uncertainty~(zeta==0.99))) +   theme_bw()  plot_grid(f1,f2,nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:2],')'),           label_fontface = 'plain',label_size = 10,           hjust = -1.5,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"load-package-and-data","dir":"Articles","previous_headings":"","what":"Load package and data","title":"Spatial prediction based on spatial stratified heterogeneity","text":"simulated data set contains 20 × 20 grid. grid divided four strata (denoted thick gray outlines), random sample 41 units drawn (denoted dots). (b) Seven reporting units whose values inferred. Gray units sampling units falling .","code":"library(sf) library(tidyverse) library(spEcula) simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting')"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"visualize-the-mean-and-standard-deviation-of-the-sample-in-each-stratum","dir":"Articles","previous_headings":"","what":"visualize the mean and standard deviation of the sample in each stratum","title":"Spatial prediction based on spatial stratified heterogeneity","text":"","code":"sampling_zone = sampling %>%     st_join(ssh['X']) %>%     st_drop_geometry()  library(ggpubr)  ggerrorplot(sampling_zone, x = \"X\", y = \"Value\",             desc_stat = \"mean_sd\", color = \"black\",             add = \"violin\", add.params = list(color = \"darkgray\")) +   geom_text(data = summarise(sampling_zone,vmean = mean(Value),.by = X),              aes(x = X, y = vmean, label = round(vmean,2)),              vjust = -0.5, hjust = -0.15, color = \"black\",size = 3) +   scale_x_discrete(labels = LETTERS[1:4]) +   theme(axis.title.x = element_blank())"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"run-sandwich-model-for-the-sim-data-use-area-weight","dir":"Articles","previous_headings":"","what":"Run sandwich model for the sim data use area weight","title":"Spatial prediction based on spatial stratified heterogeneity","text":"see estimated mean () standard error (b) returned Sandwich mapping model seven reporting units.","code":"sim_est = sandwich(sampling = sampling,stratification = ssh,reporting = reporting,                    sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',                    weight_type = 'area') sim_est ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… library(cowplot)   f1 = ggplot(data = sim_est, aes(fill = sandwichest_mean),              color = \"darkgray\") +   geom_sf() +    labs(fill='mean') +   scale_fill_gradient(low = \"#f0bc9c\", high = \"red\",                       breaks = range(sim_est$sandwichest_mean)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  f2 = ggplot(data = sim_est, aes(fill = sandwichest_standarderror),              color = \"darkgray\") +   geom_sf() +    labs(fill='se') +   scale_fill_gradient(low = \"#b6edf0\", high = \"blue\",                       breaks = range(sim_est$sandwichest_standarderror)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  plot_grid(f1, f2, nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:4],')'),           label_fontface = 'plain',label_size = 10,           hjust = 0.05,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"run-sandwich-model-for-the-sim-data-use-population-weight","dir":"Articles","previous_headings":"Run sandwich model for the sim data use area weight","what":"Run sandwich model for the sim data use population weight","title":"Spatial prediction based on spatial stratified heterogeneity","text":"Remember use population weighting sample size large enough, otherwise use area weighting.","code":"sandwich(sampling = sampling,stratification = ssh,reporting = reporting,          sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',          weight_type = 'population') ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1            NaN                      NaN    ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2            266.                       2.11 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3            311.                       2.42 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4            413.                       3.06 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5            NaN                      NaN    ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6            NaN                      NaN    ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             93.8                      2.85 ((0.6 5, 0.6 5, 0.6 5.2, 0.6…"},{"path":"https://spatlyu.github.io/spEcula/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer. Yangyang Lei. Author.","code":""},{"path":"https://spatlyu.github.io/spEcula/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lv W, Lei Y (2024). spEcula: Spatial Prediction Methods R. R package version 0.1.3, https://spatlyu.github.io/spEcula/, https://github.com/SpatLyu/spEcula.","code":"@Manual{,   title = {spEcula: Spatial Prediction Methods In R},   author = {Wenbo Lv and Yangyang Lei},   year = {2024},   note = {R package version 0.1.3, https://spatlyu.github.io/spEcula/},   url = {https://github.com/SpatLyu/spEcula}, }"},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"specula-","dir":"","previous_headings":"","what":"spEcula | Spatial Prediction Methods In R\n","title":"spEcula | Spatial Prediction Methods In R\n","text":"goal spEcula make easier use R spatial prediction based various spatial relationships (e.g. spatial dependence, spatial heterogeneity geographical similarity).","code":""},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"spEcula | Spatial Prediction Methods In R\n","text":"Full document recent release spEcula online: https://spatlyu.github.io/spEcula/ Current models functions provided spEcula :","code":""},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"spEcula | Spatial Prediction Methods In R\n","text":"can install development version spEcula github: install spEcula r-universe:","code":"# install.packages(\"devtools\") devtools::install_github(\"SpatLyu/spEcula\",build_vignettes = T,dep = T) install.packages('spEcula', repos='https://spatlyu.r-universe.dev')"},{"path":[]},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"geographically-optimal-similarity-gos-model","dir":"","previous_headings":"Example","what":"Geographically Optimal Similarity (GOS) model","title":"spEcula | Spatial Prediction Methods In R\n","text":"","code":"library(spEcula) data(zn) data(grid)  zn$Zn = log(zn$Zn) tictoc::tic() g1 = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,          data = zn, newdata = grid, kappa = 0.08,cores = 6) tictoc::toc() ## 6.6 sec elapsed g1$pred = exp(g1$pred) grid$pred = g1$pred grid$uc99 = g1$`uncertainty99` g1 ## # A tibble: 13,132 × 7 ##     pred uncertainty90 uncertainty95 uncertainty99 uncertainty99.5 ##    <dbl>         <dbl>         <dbl>         <dbl>           <dbl> ##  1  21.8        0.0818        0.0523        0.0287         0.0243  ##  2  22.5        0.0529        0.0356        0.0102         0.00954 ##  3  22.9        0.0693        0.0429        0.0224         0.0148  ##  4  22.6        0.0665        0.0572        0.0140         0.00799 ##  5  21.9        0.0736        0.0460        0.0181         0.0139  ##  6  21.5        0.0728        0.0480        0.0200         0.0169  ##  7  23.2        0.0453        0.0345        0.0185         0.0178  ##  8  24.8        0.0488        0.0434        0.0227         0.0118  ##  9  25.0        0.0435        0.0432        0.0186         0.0103  ## 10  24.5        0.0217        0.0217        0.0182         0.0141  ## # ℹ 13,122 more rows ## # ℹ 2 more variables: uncertainty99.9 <dbl>, uncertainty100 <dbl> library(ggplot2) library(cowplot) library(viridis) f1 = ggplot(grid, aes(x = Lon, y = Lat, fill = pred)) +   geom_tile() +   scale_fill_viridis(option=\"magma\", direction = -1) +    coord_equal() +   labs(fill='Prediction') +   theme_bw()  f2 = ggplot(grid, aes(x = Lon, y = Lat, fill = uc99)) +   geom_tile() +   scale_fill_viridis(option=\"mako\", direction = -1) +    coord_equal() +   labs(fill=bquote(Uncertainty~(zeta==0.99))) +   theme_bw()   plot_grid(f1,f2,nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:2],')'),           label_fontface = 'plain',label_size = 10,           hjust = -1.5,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"sandwich-mapping-model","dir":"","previous_headings":"Example","what":"Sandwich Mapping Model","title":"spEcula | Spatial Prediction Methods In R\n","text":"","code":"library(sf) library(tidyverse) library(spEcula) simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting')  sampling_zone = sampling %>%     st_join(ssh['X']) %>%     st_drop_geometry()  library(ggpubr)  ggerrorplot(sampling_zone, x = \"X\", y = \"Value\",             desc_stat = \"mean_sd\", color = \"black\",             add = \"violin\", add.params = list(color = \"darkgray\")) +   geom_text(data = summarise(sampling_zone,vmean = mean(Value),.by = X),              aes(x = X, y = vmean, label = round(vmean,2)),              vjust = -0.5, hjust = -0.15, color = \"black\",size = 3) +   scale_x_discrete(labels = LETTERS[1:4]) +   theme(axis.title.x = element_blank()) sim_est = sandwich(sampling = sampling,stratification = ssh,reporting = reporting,                    sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',                    weight_type = 'area') sim_est ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… library(cowplot)   f1 = ggplot(data = sim_est, aes(fill = sandwichest_mean),              color = \"darkgray\") +   geom_sf() +    labs(fill='mean') +   scale_fill_gradient(low = \"#f0bc9c\", high = \"red\",                       breaks = range(sim_est$sandwichest_mean)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  f2 = ggplot(data = sim_est, aes(fill = sandwichest_standarderror),              color = \"darkgray\") +   geom_sf() +    labs(fill='se') +   scale_fill_gradient(low = \"#b6edf0\", high = \"blue\",                       breaks = range(sim_est$sandwichest_standarderror)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  plot_grid(f1, f2, nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:4],')'),           label_fontface = 'plain',label_size = 10,           hjust = 0.05,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":null,"dir":"Reference","previous_headings":"","what":"geographically optimal similarity — gos","title":"geographically optimal similarity — gos","text":"Computationally optimized function geographically optimal similarity (GOS) model","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geographically optimal similarity — gos","text":"","code":"gos(formula, data = NULL, newdata = NULL, kappa = 0.25, cores = 1)"},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geographically optimal similarity — gos","text":"formula formula GOS model. data data.frame tibble observation data. newdata data.frame tibble prediction variables data. kappa numeric value percentage observation locations high similarity prediction location. kappa = 1 - tau, tau probability parameter quantile operator. default kappa 0.25, meaning 25% observations high similarity prediction location used modelling. cores positive integer(default 1). cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geographically optimal similarity — gos","text":"tibble made predictions uncertainties.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"geographically optimal similarity — gos","text":"Song, Y. (2022). Geographically Optimal Similarity. Mathematical Geosciences. doi: 10.1007/s11004-022-10036-8.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geographically optimal similarity — gos","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geographically optimal similarity — gos","text":"","code":"if (FALSE) { data(zn) data(grid) g = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine, data = zn, newdata = grid, kappa = 0.08,cores = 6) g }"},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":null,"dir":"Reference","previous_headings":"","what":"function for the best kappa parameter — gos_bestkappa","title":"function for the best kappa parameter — gos_bestkappa","text":"Computationally optimized function determining best kappa parameter optimal similarity","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function for the best kappa parameter — gos_bestkappa","text":"","code":"gos_bestkappa(formula,data = NULL,kappa=seq(0.05,1,0.05),               nrepeat = 10,nsplit = 0.5,cores = 1)"},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function for the best kappa parameter — gos_bestkappa","text":"formula formula GOS model data data.frame tible observation data kappa (optional)numeric vector optional percentages observation locations high similarity prediction location. kappa = 1 - tau, tau probability parameter quantile operator. kappa = 0.25 means 25% observations high similarity prediction location used modelling. nrepeat (optional)numeric value number cross-validation training times. default value 10. nsplit (optional)sample training set segmentation ratio,(0,1), default 0.5. cores positive integer(default 1). cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function for the best kappa parameter — gos_bestkappa","text":"list result best kappa computation process curve.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"function for the best kappa parameter — gos_bestkappa","text":"Song, Y. (2022). Geographically Optimal Similarity. Mathematical Geosciences. doi: 10.1007/s11004-022-10036-8.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"function for the best kappa parameter — gos_bestkappa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"function for the best kappa parameter — gos_bestkappa","text":"","code":"if (FALSE) { library(dplyr) library(ggplot2) library(ggrepel) data(zn) data(grid) system.time({   b1 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                      data = zn,kappa = c(0.01, 0.05, 0.1, 0.2, 0.5, 1),                      nrepeat = 2,cores = 1) }) b1$bestkappa b1$plot }"},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"spatial grid data of explanatory variables — grid","title":"spatial grid data of explanatory variables — grid","text":"Spatial grid data explanatory variables,modified geosimilarity package.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatial grid data of explanatory variables — grid","text":"","code":"grid"},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"spatial grid data of explanatory variables — grid","text":"grid: tibble grided trace element explanatory variables 13132 rows 12 variables, first column GridID.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse transform of car::bcPower — inverse_bcPower","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"Inverse transform car::bcPower","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"","code":"inverse_bcPower(z, alpha)"},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"z numeric vector inverse transformed. alpha Power transformation parameter,can got car::powerTransform().","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"numeric vector.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"","code":"library(car) #> Loading required package: carData library(moments) turbidity = c(1.0, 1.2, 1.1, 1.1, 2.4, 2.2, 2.6, 4.1, 5.0, 10.0, 4.0, 4.1, 4.2, 4.1,              5.1, 4.5, 5.0, 15.2, 10.0, 20.0, 1.1, 1.1, 1.2, 1.6, 2.2, 3.0, 4.0, 10.5) moments::skewness(turbidity) #> [1] 1.916622 shapiro.test(turbidity) #>  #> \tShapiro-Wilk normality test #>  #> data:  turbidity #> W = 0.74633, p-value = 1.383e-05 #>  lambdapt = car::powerTransform(turbidity) ttur = car::bcPower(turbidity,lambdapt$lambda) moments::skewness(ttur) #> [1] 0.04576271 shapiro.test(ttur) #>  #> \tShapiro-Wilk normality test #>  #> data:  ttur #> W = 0.93361, p-value = 0.07607 #>  inverse_bcPower(ttur,lambdapt$lambda) #>  [1]  1.0  1.2  1.1  1.1  2.4  2.2  2.6  4.1  5.0 10.0  4.0  4.1  4.2  4.1  5.1 #> [16]  4.5  5.0 15.2 10.0 20.0  1.1  1.1  1.2  1.6  2.2  3.0  4.0 10.5"},{"path":"https://spatlyu.github.io/spEcula/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":null,"dir":"Reference","previous_headings":"","what":"sandwich mapping model — sandwich","title":"sandwich mapping model — sandwich","text":"Spatial prediction based spatial stratified heterogeneity using sandwich mapping model.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sandwich mapping model — sandwich","text":"","code":"sandwich(   sampling,   stratification,   reporting,   sampling_attr,   ssh_zone,   reporting_id,   weight_type = \"area\" )"},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sandwich mapping model — sandwich","text":"sampling Sampling layer, spatial point vector object sf can converted sf object. stratification Stratification layer, spatial polygon vector object sf can converted sf object. reporting Reporting layer, spatial polygon vector object sf can converted sf object. sampling_attr attribute column sampling point sampling layer. ssh_zone zone column stratification layer. reporting_id id column reporting layer. weight_type (optional) Geographic area based weight(area) indicate human population size(population) , Default area.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sandwich mapping model — sandwich","text":"sf object estimated mean sandwichest_mean standard error sandwichest_standarderror.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"sandwich mapping model — sandwich","text":"Lin, Y., Xu, C., & Wang, J. (2023). sandwichr: Spatial prediction R based spatial stratified heterogeneity. Transactions GIS: TG, 27(5), 1579–1598. https://doi.org/10.1111/tgis.13088","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sandwich mapping model — sandwich","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sandwich mapping model — sandwich","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting') sandwich(sampling = sampling,stratification = ssh,reporting = reporting,         sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',         weight_type = 'population') #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Simple feature collection with 7 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 #> Geodetic CRS:  WGS 84 #> # A tibble: 7 × 4 #>       Y sandwichest_mean sandwichest_standarderror                      geometry #>   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> #> 1     1            NaN                      NaN    ((0.8 4, 0.8 4, 1 4, 1.2 4, … #> 2     2            266.                       2.11 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… #> 3     3            311.                       2.42 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… #> 4     4            413.                       3.06 ((4 3.6, 4 3.8, 4 4, 4 4.2, … #> 5     5            NaN                      NaN    ((1 3.6, 1 3.4, 1.2 3.4, 1.4… #> 6     6            NaN                      NaN    ((1.6 3, 1.6 2.8, 1.8 2.8, 2… #> 7     7             93.8                      2.85 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… sandwich(sampling = sampling,stratification = ssh,reporting = reporting,         sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',         weight_type = 'area') #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Simple feature collection with 7 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 #> Geodetic CRS:  WGS 84 #> # A tibble: 7 × 4 #>       Y sandwichest_mean sandwichest_standarderror                      geometry #>   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> #> 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … #> 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… #> 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… #> 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … #> 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… #> 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… #> 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6…"},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":null,"dir":"Reference","previous_headings":"","what":"spatial datasets of trace element Zn — zn","title":"spatial datasets of trace element Zn — zn","text":"Spatial datasets trace element Zn,modified geosimilarity package.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatial datasets of trace element Zn — zn","text":"","code":"zn"},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"spatial datasets of trace element Zn — zn","text":"zn: tibble trace element Zn 885 rows 12 variables","code":""},{"path":"https://spatlyu.github.io/spEcula/news/index.html","id":"specula-development-version","dir":"Changelog","previous_headings":"","what":"spEcula (development version)","title":"spEcula (development version)","text":"support advanced spatial methods.","code":""},{"path":"https://spatlyu.github.io/spEcula/news/index.html","id":"specula-013","dir":"Changelog","previous_headings":"","what":"spEcula 0.1.3","title":"spEcula 0.1.3","text":"Remove spatial hierarchical heterogeneity test, please consider gdverse package related functions.","code":""},{"path":"https://spatlyu.github.io/spEcula/news/index.html","id":"specula-012","dir":"Changelog","previous_headings":"","what":"spEcula 0.1.2","title":"spEcula 0.1.2","text":"Support GOS sandwich mapping model.","code":""}]
