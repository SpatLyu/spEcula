[{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"load-data-and-package","dir":"Articles","previous_headings":"","what":"Load data and package","title":"Geographically Optimal Similarity Model","text":"use zn data train gos model,use grid data predict. Data summary Variable type: numeric Data summary Variable type: numeric","code":"library(spEcula) data(zn) data(grid)  skimr::skim(zn) skimr::skim(grid)"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"data-pre-processing-and-variable-selection","dir":"Articles","previous_headings":"","what":"Data pre-processing and variable selection","title":"Geographically Optimal Similarity Model","text":"use zn data grid data o predict Zn scope grid data. ,can see zn variable Zn data skewed (right skewed),Let’s normality test . Shapiro-Wilk normality test \\(\\text{p-value} < 2.2e-16 << 0.05\\) W value \\(0.84834\\), can conclude high confidence zn variable Zn data follow normal distribution. Now,transform zn variable Zn data,use Power Transform method.(ps: can also use log-transformation). Power Transform uses maximum likelihood-like approach Box Cox (1964) select transformation univariate multivariate response normality. First calculate appropriate transformation parameters using powerTransform() function car package use parameter transform data using bcPower() function. Now, let’s see transformed zn variable Zn data see skewness:  right, let’s move next step see variable correlation:  test multicollinearity use vif: step, selected variables include Slope, Water, NDVI, SOC, pH, Road, Mine.","code":"moments::skewness(zn$Zn) ## [1] 1.414892 shapiro.test(zn$Zn) ##  ##  Shapiro-Wilk normality test ##  ## data:  zn$Zn ## W = 0.84834, p-value < 2.2e-16 lambdapt = car::powerTransform(zn$Zn) lambdapt ## Estimated transformation parameter  ##       zn$Zn  ## -0.02447525 zn$Zn = car::bcPower(zn$Zn,lambdapt$lambda) hist(zn$Zn) moments::skewness(zn$Zn) ## [1] 0.004367706 PerformanceAnalytics::chart.Correlation(zn[, c(3:12)],pch = 19) m1 = lm(Zn ~ Slope + Water + NDVI + SOC + pH + Road + Mine, data = zn) car::vif(m1) ##    Slope    Water     NDVI      SOC       pH     Road     Mine  ## 1.651039 1.232454 1.459539 1.355824 1.568347 2.273387 2.608347"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"determining-the-optimal-similarity","dir":"Articles","previous_headings":"","what":"Determining the optimal similarity","title":"Geographically Optimal Similarity Model","text":"can set optional numbers kappa vector higher value cross-validation repeat times nrepeat multi-core parallel(set cores bigger).","code":"tictoc::tic() b1 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                    data = zn,kappa = c(seq(0.01, 0.1, 0.01), seq(0.2, 1, 0.1)),                    nrepeat = 10,nsplit = .8,cores = 1) tictoc::toc() ## 30.13 sec elapsed b1$bestkappa ## [1] 0.07 b1$cvmean ## # A tibble: 19 × 2 ##    kappa  rmse ##    <dbl> <dbl> ##  1  0.01 0.610 ##  2  0.02 0.602 ##  3  0.03 0.597 ##  4  0.04 0.596 ##  5  0.05 0.594 ##  6  0.06 0.594 ##  7  0.07 0.594 ##  8  0.08 0.594 ##  9  0.09 0.594 ## 10  0.1  0.594 ## 11  0.2  0.594 ## 12  0.3  0.594 ## 13  0.4  0.594 ## 14  0.5  0.594 ## 15  0.6  0.594 ## 16  0.7  0.594 ## 17  0.8  0.594 ## 18  0.9  0.594 ## 19  1    0.594 b1$plot tictoc::tic() b2 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                    data = zn,kappa = c(seq(0.01, 0.1, 0.01), seq(0.2, 1, 0.1)),                    nrepeat = 10,nsplit = .8,cores = 6) tictoc::toc() ## 10.65 sec elapsed b2$bestkappa ## [1] 0.07 b2$cvmean ## # A tibble: 19 × 2 ##    kappa  rmse ##    <dbl> <dbl> ##  1  0.01 0.610 ##  2  0.02 0.602 ##  3  0.03 0.597 ##  4  0.04 0.596 ##  5  0.05 0.594 ##  6  0.06 0.594 ##  7  0.07 0.594 ##  8  0.08 0.594 ##  9  0.09 0.594 ## 10  0.1  0.594 ## 11  0.2  0.594 ## 12  0.3  0.594 ## 13  0.4  0.594 ## 14  0.5  0.594 ## 15  0.6  0.594 ## 16  0.7  0.594 ## 17  0.8  0.594 ## 18  0.9  0.594 ## 19  1    0.594 b2$plot"},{"path":"https://spatlyu.github.io/spEcula/articles/GOS.html","id":"spatial-prediction-use-gos-model","dir":"Articles","previous_headings":"","what":"Spatial prediction use GOS model","title":"Geographically Optimal Similarity Model","text":"back transformation using transformation parameters used Box-cos transformation show result","code":"tictoc::tic() g = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,         data = zn, newdata = grid, kappa = 0.07,cores = 6) tictoc::toc() ## 10.92 sec elapsed grid$pred = inverse_bcPower(g$pred,lambdapt$lambda) grid$uc99 = g$`uncertainty99` library(ggplot2) library(viridis) ## Loading required package: viridisLite library(cowplot)  f1 = ggplot(grid, aes(x = Lon, y = Lat, fill = pred)) +   geom_tile() +   scale_fill_viridis(option=\"magma\", direction = -1) +   coord_equal() +   labs(fill='Prediction') +   theme_bw() f2 = ggplot(grid, aes(x = Lon, y = Lat, fill = uc99)) +   geom_tile() +   scale_fill_viridis(option=\"mako\", direction = -1) +   coord_equal() +   labs(fill=bquote(Uncertainty~(zeta==0.99))) +   theme_bw()  plot_grid(f1,f2,nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:2],')'),           label_fontface = 'plain',label_size = 10,           hjust = -1.5,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"load-package-and-data","dir":"Articles","previous_headings":"","what":"Load package and data","title":"Spatial prediction based on spatial stratified heterogeneity","text":"simulated data set contains 20 × 20 grid. grid divided four strata (denoted thick gray outlines), random sample 41 units drawn (denoted dots). (b) Seven reporting units whose values inferred. Gray units sampling units falling .","code":"library(sf) library(tidyverse) library(spEcula) simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting')"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"visualize-the-mean-and-standard-deviation-of-the-sample-in-each-stratum","dir":"Articles","previous_headings":"","what":"visualize the mean and standard deviation of the sample in each stratum","title":"Spatial prediction based on spatial stratified heterogeneity","text":"","code":"sampling_zone = sampling %>%     st_join(ssh['X']) %>%     st_drop_geometry()  library(ggpubr)  ggerrorplot(sampling_zone, x = \"X\", y = \"Value\",             desc_stat = \"mean_sd\", color = \"black\",             add = \"violin\", add.params = list(color = \"darkgray\")) +   geom_text(data = summarise(sampling_zone,vmean = mean(Value),.by = X),              aes(x = X, y = vmean, label = round(vmean,2)),              vjust = -0.5, hjust = -0.15, color = \"black\",size = 3) +   scale_x_discrete(labels = LETTERS[1:4]) +   theme(axis.title.x = element_blank())"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"run-sandwich-model-for-the-sim-data-use-area-weight","dir":"Articles","previous_headings":"","what":"Run sandwich model for the sim data use area weight","title":"Spatial prediction based on spatial stratified heterogeneity","text":"see estimated mean () standard error (b) returned Sandwich mapping model seven reporting units.","code":"sim_est = sandwich(sampling = sampling,stratification = ssh,reporting = reporting,                    sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',                    weight_type = 'area') sim_est ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… library(cowplot)   f1 = ggplot(data = sim_est, aes(fill = sandwichest_mean),              color = \"darkgray\") +   geom_sf() +    labs(fill='mean') +   scale_fill_gradient(low = \"#f0bc9c\", high = \"red\",                       breaks = range(sim_est$sandwichest_mean)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  f2 = ggplot(data = sim_est, aes(fill = sandwichest_standarderror),              color = \"darkgray\") +   geom_sf() +    labs(fill='se') +   scale_fill_gradient(low = \"#b6edf0\", high = \"blue\",                       breaks = range(sim_est$sandwichest_standarderror)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  plot_grid(f1, f2, nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:4],')'),           label_fontface = 'plain',label_size = 10,           hjust = 0.05,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/articles/sandwich.html","id":"run-sandwich-model-for-the-sim-data-use-population-weight","dir":"Articles","previous_headings":"Run sandwich model for the sim data use area weight","what":"Run sandwich model for the sim data use population weight","title":"Spatial prediction based on spatial stratified heterogeneity","text":"Remember use population weighting sample size large enough, otherwise use area weighting.","code":"sandwich(sampling = sampling,stratification = ssh,reporting = reporting,          sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',          weight_type = 'population') ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1            NaN                      NaN    ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2            266.                       2.11 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3            311.                       2.42 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4            413.                       3.06 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5            NaN                      NaN    ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6            NaN                      NaN    ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             93.8                      2.85 ((0.6 5, 0.6 5, 0.6 5.2, 0.6…"},{"path":"https://spatlyu.github.io/spEcula/articles/ssh-test.html","id":"load-package-and-pre-processing-data-","dir":"Articles","previous_headings":"","what":"Load package and pre-processing data.","title":"Spatial Stratified Heterogeneity Test","text":"See layers NTDs.gpkg: NTDs.gpkg, disease dependent variable, continuous numerical variable, others independent discrete variables. Now need put layers together: Plot together:  Attribute spatial join Check whether NA NTDs:","code":"library(sf) library(tidyverse) library(spEcula) ntdspath = system.file(\"extdata\", \"NTDs.gpkg\",package = 'spEcula') st_layers(ntdspath) ## Driver: GPKG  ## Available layers: ##   layer_name geometry_type features fields crs_name ## 1    disease       Polygon      189      2  unknown ## 2  watershed       Polygon        9      2  unknown ## 3  elevation Multi Polygon        7      2  unknown ## 4   soiltype Multi Polygon        6      2  unknown watershed = read_sf(ntdspath,layer = 'watershed') elevation = read_sf(ntdspath,layer = 'elevation') soiltype = read_sf(ntdspath,layer = 'soiltype') disease = read_sf(ntdspath,layer = 'disease') library(cowplot)  f1 = ggplot(data = disease) +   geom_sf(aes(fill = incidence),lwd = .1,color = 'grey') +   viridis::scale_fill_viridis(option=\"mako\", direction = -1) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'inside',     legend.position.inside = c(.1,.25),     legend.background = element_rect(fill = 'transparent',color = NA)   ) f2 = ggplot(data = watershed) +   geom_sf(aes(fill = watershed),lwd = .1,color = 'grey') +   tidyterra::scale_fill_whitebox_c() +   coord_sf(crs = NULL) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'inside',     legend.position.inside = c(.1,.25),     legend.background = element_rect(fill = 'transparent',color = NA)   ) f3 = ggplot(data = elevation) +   geom_sf(aes(fill = elevation),lwd = .1,color = 'grey') +   tidyterra::scale_fill_hypso_c() +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'inside',     legend.position.inside = c(.1,.25),     legend.background = element_rect(fill = 'transparent',color = NA)   ) f4 = ggplot(data = soiltype) +   geom_sf(aes(fill = soiltype),lwd = .1,color = 'grey') +   tidyterra::scale_fill_wiki_c() +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'inside',     legend.position.inside = c(.1,.25),     legend.background = element_rect(fill = 'transparent',color = NA)   )  plot_grid(f1,f2,f3,f4, nrow = 2,label_fontfamily = 'serif',           labels = paste0('(',letters[1:4],')'),           label_fontface = 'plain',label_size = 10,           hjust = -1.5,align = 'hv')  -> p p NTDs = disease %>%   st_centroid() %>%   st_join(watershed[,\"watershed\"]) %>%   st_join(elevation[,\"elevation\"]) %>%   st_join(soiltype[,\"soiltype\"]) NTDs %>%   dplyr::filter(if_any(everything(),~is.na(.x))) ## Simple feature collection with 4 features and 5 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 301567.5 ymin: 3989433 xmax: 318763.3 ymax: 3991906 ## Projected CRS: +proj=aea +lat_0=0 +lon_0=105 +lat_1=25 +lat_2=47 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ## # A tibble: 4 × 6 ##   SP_ID incidence               geom watershed elevation soiltype ## * <chr>     <dbl>        <POINT [m]>     <int>     <int>    <int> ## 1 141        6.48 (318763.3 3991847)         9        NA        3 ## 2 165        6.53 (316574.1 3989433)         4        NA        2 ## 3 166        6.43 (311439.1 3990674)         4        NA        2 ## 4 188        6.26 (301567.5 3991906)        NA         2        3 NTDs %>%   dplyr::filter(if_all(everything(),~!is.na(.x))) -> NTDs"},{"path":"https://spatlyu.github.io/spEcula/articles/ssh-test.html","id":"factor-detector","dir":"Articles","previous_headings":"","what":"Factor detector","title":"Spatial Stratified Heterogeneity Test","text":"","code":"NTDs = st_drop_geometry(NTDs) fd = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'factor') fd ## Spatial Stratified Heterogeneity Test  ##   ##           Factor detector"},{"path":"https://spatlyu.github.io/spEcula/articles/ssh-test.html","id":"interaction-detector","dir":"Articles","previous_headings":"","what":"Interaction detector","title":"Spatial Stratified Heterogeneity Test","text":"","code":"id = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'interaction') id ## Spatial Stratified Heterogeneity Test  ##   ##          Interaction detector"},{"path":"https://spatlyu.github.io/spEcula/articles/ssh-test.html","id":"risk-detector","dir":"Articles","previous_headings":"","what":"Risk detector","title":"Spatial Stratified Heterogeneity Test","text":"can change significant interval assign alpha argument,default value alpha argument 0.95.","code":"rd = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'risk') rd ## Spatial Stratified Heterogeneity Test  ##   ##              Risk detector              ##  ## -------------------------------------- ## Variable elevation: ##  ## |1   |2   |3   |4   |5   |6   |7   | ## |:---|:---|:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |Yes |Yes |Yes | ## |Yes |NA  |No  |Yes |Yes |Yes |Yes | ## |Yes |No  |NA  |Yes |Yes |Yes |Yes | ## |Yes |Yes |Yes |NA  |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |NA  |Yes |Yes | ## |Yes |Yes |Yes |Yes |Yes |NA  |Yes | ## |Yes |Yes |Yes |Yes |Yes |Yes |NA  | ## -------------------------------------- ## Variable soiltype: ##  ## |1   |2   |3   |4   |5   | ## |:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |No  | ## |Yes |NA  |No  |Yes |Yes | ## |Yes |No  |NA  |Yes |Yes | ## |Yes |Yes |Yes |NA  |Yes | ## |No  |Yes |Yes |Yes |NA  | ## -------------------------------------- ## Variable watershed: ##  ## |1   |2   |3   |4   |5   |6   |7   |8   |9   | ## |:---|:---|:---|:---|:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |Yes |Yes |Yes |Yes |Yes | ## |Yes |NA  |Yes |No  |Yes |Yes |Yes |Yes |Yes | ## |Yes |Yes |NA  |Yes |Yes |Yes |No  |No  |No  | ## |Yes |No  |Yes |NA  |Yes |Yes |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |NA  |No  |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |No  |NA  |Yes |Yes |Yes | ## |Yes |Yes |No  |Yes |Yes |Yes |NA  |No  |No  | ## |Yes |Yes |No  |Yes |Yes |Yes |No  |NA  |Yes | ## |Yes |Yes |No  |Yes |Yes |Yes |No  |Yes |NA  | rd99 = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'risk',alpha = 0.99) rd99 ## Spatial Stratified Heterogeneity Test  ##   ##              Risk detector              ##  ## -------------------------------------- ## Variable elevation: ##  ## |1   |2   |3   |4   |5   |6   |7   | ## |:---|:---|:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |Yes |Yes |Yes | ## |Yes |NA  |No  |Yes |Yes |Yes |Yes | ## |Yes |No  |NA  |Yes |Yes |Yes |Yes | ## |Yes |Yes |Yes |NA  |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |NA  |Yes |Yes | ## |Yes |Yes |Yes |Yes |Yes |NA  |Yes | ## |Yes |Yes |Yes |Yes |Yes |Yes |NA  | ## -------------------------------------- ## Variable soiltype: ##  ## |1   |2   |3   |4   |5   | ## |:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |No  | ## |Yes |NA  |No  |Yes |Yes | ## |Yes |No  |NA  |Yes |Yes | ## |Yes |Yes |Yes |NA  |Yes | ## |No  |Yes |Yes |Yes |NA  | ## -------------------------------------- ## Variable watershed: ##  ## |1   |2   |3   |4   |5   |6   |7   |8   |9   | ## |:---|:---|:---|:---|:---|:---|:---|:---|:---| ## |NA  |Yes |Yes |Yes |Yes |Yes |Yes |Yes |Yes | ## |Yes |NA  |Yes |No  |Yes |Yes |Yes |Yes |Yes | ## |Yes |Yes |NA  |Yes |Yes |Yes |No  |No  |No  | ## |Yes |No  |Yes |NA  |Yes |Yes |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |NA  |No  |Yes |Yes |Yes | ## |Yes |Yes |Yes |Yes |No  |NA  |Yes |Yes |Yes | ## |Yes |Yes |No  |Yes |Yes |Yes |NA  |No  |No  | ## |Yes |Yes |No  |Yes |Yes |Yes |No  |NA  |Yes | ## |Yes |Yes |No  |Yes |Yes |Yes |No  |Yes |NA  |"},{"path":"https://spatlyu.github.io/spEcula/articles/ssh-test.html","id":"ecological-detector","dir":"Articles","previous_headings":"","what":"Ecological detector","title":"Spatial Stratified Heterogeneity Test","text":"can also change significant interval assign alpha argument,default value alpha argument 0.95.","code":"ed = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'ecological') ed ## Spatial Stratified Heterogeneity Test  ##   ##           ecological detector           ##  ## -------------------------------------- ##  ##  ## |          |elevation |soiltype | ## |:---------|:---------|:--------| ## |watershed |No        |No       | ## |elevation |NA        |No       | ed99 = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'ecological',alpha = 0.99) ed99 ## Spatial Stratified Heterogeneity Test  ##   ##           ecological detector           ##  ## -------------------------------------- ##  ##  ## |          |elevation |soiltype | ## |:---------|:---------|:--------| ## |watershed |No        |No       | ## |elevation |NA        |No       |"},{"path":"https://spatlyu.github.io/spEcula/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer. Yangyang Lei. Author.","code":""},{"path":"https://spatlyu.github.io/spEcula/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lv W, Lei Y (2024). spEcula: Spatial Prediction Methods R. R package version 0.1.2, https://spatlyu.github.io/spEcula/, https://github.com/SpatLyu/spEcula.","code":"@Manual{,   title = {spEcula: Spatial Prediction Methods In R},   author = {Wenbo Lv and Yangyang Lei},   year = {2024},   note = {R package version 0.1.2, https://spatlyu.github.io/spEcula/},   url = {https://github.com/SpatLyu/spEcula}, }"},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"specula-","dir":"","previous_headings":"","what":"spEcula | Spatial Methods In R\n","title":"spEcula | Spatial Methods In R\n","text":"goal spEcula make easier use R spatial prediction based spatial dependence, spatial stratification heterogeneity geographical configuration similarity, spatial statistical inference based spatial relationships (three laws geography).","code":""},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"spEcula | Spatial Methods In R\n","text":"can install development version spEcula github: install spEcula r-universe:","code":"# install.packages(\"devtools\") devtools::install_github(\"SpatLyu/spEcula\",build_vignettes = T,dep = T) install.packages('spEcula', repos='https://spatlyu.r-universe.dev')"},{"path":[]},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"geographically-optimal-similarity-gos-model","dir":"","previous_headings":"Example","what":"Geographically Optimal Similarity (GOS) model","title":"spEcula | Spatial Methods In R\n","text":"","code":"library(spEcula) data(zn) data(grid)  zn$Zn = log(zn$Zn) tictoc::tic() g1 = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,          data = zn, newdata = grid, kappa = 0.08,cores = 6) tictoc::toc() ## 6.39 sec elapsed g1$pred = exp(g1$pred) grid$pred = g1$pred grid$uc99 = g1$`uncertainty99` g1 ## # A tibble: 13,132 × 7 ##     pred uncertainty90 uncertainty95 uncertainty99 uncertainty99.5 ##    <dbl>         <dbl>         <dbl>         <dbl>           <dbl> ##  1  21.8        0.0818        0.0523        0.0287         0.0243  ##  2  22.5        0.0529        0.0356        0.0102         0.00954 ##  3  22.9        0.0693        0.0429        0.0224         0.0148  ##  4  22.6        0.0665        0.0572        0.0140         0.00799 ##  5  21.9        0.0736        0.0460        0.0181         0.0139  ##  6  21.5        0.0728        0.0480        0.0200         0.0169  ##  7  23.2        0.0453        0.0345        0.0185         0.0178  ##  8  24.8        0.0488        0.0434        0.0227         0.0118  ##  9  25.0        0.0435        0.0432        0.0186         0.0103  ## 10  24.5        0.0217        0.0217        0.0182         0.0141  ## # ℹ 13,122 more rows ## # ℹ 2 more variables: uncertainty99.9 <dbl>, uncertainty100 <dbl> library(ggplot2) library(cowplot) library(viridis) f1 = ggplot(grid, aes(x = Lon, y = Lat, fill = pred)) +   geom_tile() +   scale_fill_viridis(option=\"magma\", direction = -1) +    coord_equal() +   labs(fill='Prediction') +   theme_bw()  f2 = ggplot(grid, aes(x = Lon, y = Lat, fill = uc99)) +   geom_tile() +   scale_fill_viridis(option=\"mako\", direction = -1) +    coord_equal() +   labs(fill=bquote(Uncertainty~(zeta==0.99))) +   theme_bw()   plot_grid(f1,f2,nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:2],')'),           label_fontface = 'plain',label_size = 10,           hjust = -1.5,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"spatial-stratified-heterogeneity-test","dir":"","previous_headings":"Example","what":"Spatial Stratified Heterogeneity Test","title":"spEcula | Spatial Methods In R\n","text":"","code":"library(spEcula) data(NTDs) head(NTDs) ## # A tibble: 6 × 5 ##   SP_ID incidence watershed elevation soiltype ##   <chr>     <dbl>     <int>     <int>    <int> ## 1 0          5.94         5         5        5 ## 2 1          5.87         5         5        4 ## 3 2          5.88         5         5        5 ## 4 3          5.98         5         5        5 ## 5 4          5.96         5         5        1 ## 6 5          5.66         5         5        4 fd = ssh.test(incidence ~ watershed + elevation + soiltype,               data = NTDs,type = 'factor') fd ## Spatial Stratified Heterogeneity Test  ##   ##           Factor detector"},{"path":"https://spatlyu.github.io/spEcula/index.html","id":"sandwich-mapping-model","dir":"","previous_headings":"Example","what":"Sandwich Mapping Model","title":"spEcula | Spatial Methods In R\n","text":"","code":"library(sf) library(tidyverse) library(spEcula) simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting')  sampling_zone = sampling %>%     st_join(ssh['X']) %>%     st_drop_geometry()  library(ggpubr)  ggerrorplot(sampling_zone, x = \"X\", y = \"Value\",             desc_stat = \"mean_sd\", color = \"black\",             add = \"violin\", add.params = list(color = \"darkgray\")) +   geom_text(data = summarise(sampling_zone,vmean = mean(Value),.by = X),              aes(x = X, y = vmean, label = round(vmean,2)),              vjust = -0.5, hjust = -0.15, color = \"black\",size = 3) +   scale_x_discrete(labels = LETTERS[1:4]) +   theme(axis.title.x = element_blank()) sim_est = sandwich(sampling = sampling,stratification = ssh,reporting = reporting,                    sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',                    weight_type = 'area') sim_est ## Simple feature collection with 7 features and 3 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 ## Geodetic CRS:  WGS 84 ## # A tibble: 7 × 4 ##       Y sandwichest_mean sandwichest_standarderror                      geometry ##   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> ## 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … ## 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… ## 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… ## 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … ## 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… ## 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… ## 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… library(cowplot)   f1 = ggplot(data = sim_est, aes(fill = sandwichest_mean),              color = \"darkgray\") +   geom_sf() +    labs(fill='mean') +   scale_fill_gradient(low = \"#f0bc9c\", high = \"red\",                       breaks = range(sim_est$sandwichest_mean)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  f2 = ggplot(data = sim_est, aes(fill = sandwichest_standarderror),              color = \"darkgray\") +   geom_sf() +    labs(fill='se') +   scale_fill_gradient(low = \"#b6edf0\", high = \"blue\",                       breaks = range(sim_est$sandwichest_standarderror)) +   theme_bw() +   theme(     axis.text = element_blank(),     axis.ticks = element_blank(),     axis.title = element_blank(),     panel.grid = element_blank(),     legend.position = 'right',     legend.background = element_rect(fill = 'transparent',color = NA)   )  plot_grid(f1, f2, nrow = 1,label_fontfamily = 'serif',           labels = paste0('(',letters[1:4],')'),           label_fontface = 'plain',label_size = 10,           hjust = 0.05,align = 'hv')  -> p p"},{"path":"https://spatlyu.github.io/spEcula/reference/NTDs.html","id":null,"dir":"Reference","previous_headings":"","what":"NTDs data — NTDs","title":"NTDs data — NTDs","text":"See Geodetecor Model Vignette","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/NTDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NTDs data — NTDs","text":"","code":"NTDs"},{"path":"https://spatlyu.github.io/spEcula/reference/NTDs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NTDs data — NTDs","text":"NTDs: tibble 185 rows 5 variables.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"ecological detector — ecological_detector","title":"ecological detector — ecological_detector","text":"Compare effects two factors \\(X_1\\) \\(X_2\\) spatial distribution attribute \\(Y\\).","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ecological detector — ecological_detector","text":"","code":"ecological_detector(y, x1, x2, alpha = 0.95)"},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ecological detector — ecological_detector","text":"y Dependent variable, continuous numeric vector. x1 Covariate \\(X_1\\), factor, character discrete numeric. x2 Covariate \\(X_2\\), factor, character discrete numeric. alpha (optional) Confidence level interval,default 0.95.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ecological detector — ecological_detector","text":"list contains F statistics, p-values, significant difference two factors \\(X_1\\) \\(X_2\\) spatial distribution attribute \\(Y\\)","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ecological detector — ecological_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ecological_detector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ecological detector — ecological_detector","text":"","code":"ecological_detector(y = 1:7,x1 = c('x',rep('y',3),rep('z',3)), x2 = c(rep('a',2),rep('b',2),rep('c',3))) #> $`F-statistic` #> [1] 2.133333 #>  #> $`P-value` #> [1] 0.189319 #>  #> $Ecological #> [1] No #> Levels: Yes No #>"},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"factor detector — factor_detector","title":"factor detector — factor_detector","text":"factor detector q-statistic measures spatial stratified heterogeneity variable Y, determinant power covariate X Y.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"factor detector — factor_detector","text":"","code":"factor_detector(y, x)"},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"factor detector — factor_detector","text":"y Variable Y, continuous numeric vector. x Covariate X, factor, character discrete numeric.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"factor detector — factor_detector","text":"list contains Q-statistic p-value.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"factor detector — factor_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/factor_detector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"factor detector — factor_detector","text":"","code":"factor_detector(x = c('x',rep('y',3),rep('z',3)),y = 1:7) #> $`Q-statistic` #> [1] 0.7714286 #>  #> $`P-value` #> [1] 0.07936477 #>"},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":null,"dir":"Reference","previous_headings":"","what":"geographically optimal similarity — gos","title":"geographically optimal similarity — gos","text":"Computationally optimized function geographically optimal similarity (GOS) model","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geographically optimal similarity — gos","text":"","code":"gos(formula, data = NULL, newdata = NULL, kappa = 0.25, cores = 1)"},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geographically optimal similarity — gos","text":"formula formula GOS model. data data.frame tibble observation data. newdata data.frame tibble prediction variables data. kappa numeric value percentage observation locations high similarity prediction location. kappa = 1 - tau, tau probability parameter quantile operator. default kappa 0.25, meaning 25% observations high similarity prediction location used modelling. cores positive integer(default 1). cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geographically optimal similarity — gos","text":"tibble made predictions uncertainties.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"geographically optimal similarity — gos","text":"Song, Y. (2022). Geographically Optimal Similarity. Mathematical Geosciences. doi: 10.1007/s11004-022-10036-8.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geographically optimal similarity — gos","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geographically optimal similarity — gos","text":"","code":"if (FALSE) { data(zn) data(grid) g = gos(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine, data = zn, newdata = grid, kappa = 0.08,cores = 6) g }"},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":null,"dir":"Reference","previous_headings":"","what":"function for the best kappa parameter — gos_bestkappa","title":"function for the best kappa parameter — gos_bestkappa","text":"Computationally optimized function determining best kappa parameter optimal similarity","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function for the best kappa parameter — gos_bestkappa","text":"","code":"gos_bestkappa(formula,data = NULL,kappa=seq(0.05,1,0.05),               nrepeat = 10,nsplit = 0.5,cores = 1)"},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function for the best kappa parameter — gos_bestkappa","text":"formula formula GOS model data data.frame tible observation data kappa (optional)numeric vector optional percentages observation locations high similarity prediction location. kappa = 1 - tau, tau probability parameter quantile operator. kappa = 0.25 means 25% observations high similarity prediction location used modelling. nrepeat (optional)numeric value number cross-validation training times. default value 10. nsplit (optional)sample training set segmentation ratio,(0,1), default 0.5. cores positive integer(default 1). cores > 1, 'parallel' package cluster many cores created used. can also supply cluster object.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function for the best kappa parameter — gos_bestkappa","text":"list result best kappa computation process curve.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"function for the best kappa parameter — gos_bestkappa","text":"Song, Y. (2022). Geographically Optimal Similarity. Mathematical Geosciences. doi: 10.1007/s11004-022-10036-8.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"function for the best kappa parameter — gos_bestkappa","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/gos_bestkappa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"function for the best kappa parameter — gos_bestkappa","text":"","code":"if (FALSE) { library(dplyr) library(ggplot2) library(ggrepel) data(zn) data(grid) system.time({   b1 = gos_bestkappa(Zn ~ Slope + Water + NDVI  + SOC + pH + Road + Mine,                      data = zn,kappa = c(0.01, 0.05, 0.1, 0.2, 0.5, 1),                      nrepeat = 2,cores = 1) }) b1$bestkappa b1$plot }"},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"spatial grid data of explanatory variables — grid","title":"spatial grid data of explanatory variables — grid","text":"Spatial grid data explanatory variables,modified geosimilarity package.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatial grid data of explanatory variables — grid","text":"","code":"grid"},{"path":"https://spatlyu.github.io/spEcula/reference/grid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"spatial grid data of explanatory variables — grid","text":"grid: tibble grided trace element explanatory variables 13132 rows 12 variables, first column GridID.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"interaction detector — interaction_detector","title":"interaction detector — interaction_detector","text":"Identify interaction different risk factors, , assess whether factors X1 X2 together increase decrease explanatory power dependent variable Y, whether effects factors Y independent .","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"interaction detector — interaction_detector","text":"","code":"interaction_detector(y, x1, x2)"},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"interaction detector — interaction_detector","text":"y Dependent variable, continuous numeric vector. x1 Covariate \\(X_1\\), factor, character discrete numeric. x2 Covariate \\(X_2\\), factor, character discrete numeric.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"interaction detector — interaction_detector","text":"list contains Q statistic factors \\(X_1\\) \\(X_1\\) act \\(Y\\) alone Q statistic two interact \\(Y\\) together result type interaction detector.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"interaction detector — interaction_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/interaction_detector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"interaction detector — interaction_detector","text":"","code":"interaction_detector(y = 1:7,x1 = c('x',rep('y',3),rep('z',3)), x2 = c(rep('a',2),rep('b',2),rep('c',3))) #> $`Variable1 Q-statistics` #> [1] 0.7714286 #>  #> $`Variable2 Q-statistics` #> [1] 0.8928571 #>  #> $`Variable1 and Variable2 interact Q-statistics` #> [1] 0.75 #>  #> $Interaction #> [1] \"Weaken, nonlinear\" #>"},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse transform of car::bcPower — inverse_bcPower","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"Inverse transform car::bcPower","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"","code":"inverse_bcPower(z, alpha)"},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"z numeric vector inverse transformed. alpha Power transformation parameter,can got car::powerTransform().","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"numeric vector.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/inverse_bcPower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse transform of car::bcPower — inverse_bcPower","text":"","code":"library(car) #> Loading required package: carData library(moments) turbidity = c(1.0, 1.2, 1.1, 1.1, 2.4, 2.2, 2.6, 4.1, 5.0, 10.0, 4.0, 4.1, 4.2, 4.1,              5.1, 4.5, 5.0, 15.2, 10.0, 20.0, 1.1, 1.1, 1.2, 1.6, 2.2, 3.0, 4.0, 10.5) moments::skewness(turbidity) #> [1] 1.916622 shapiro.test(turbidity) #>  #> \tShapiro-Wilk normality test #>  #> data:  turbidity #> W = 0.74633, p-value = 1.383e-05 #>  lambdapt = car::powerTransform(turbidity) ttur = car::bcPower(turbidity,lambdapt$lambda) moments::skewness(ttur) #> [1] 0.04576271 shapiro.test(ttur) #>  #> \tShapiro-Wilk normality test #>  #> data:  ttur #> W = 0.93361, p-value = 0.07607 #>  inverse_bcPower(ttur,lambdapt$lambda) #>  [1]  1.0  1.2  1.1  1.1  2.4  2.2  2.6  4.1  5.0 10.0  4.0  4.1  4.2  4.1  5.1 #> [16]  4.5  5.0 15.2 10.0 20.0  1.1  1.1  1.2  1.6  2.2  3.0  4.0 10.5"},{"path":"https://spatlyu.github.io/spEcula/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://spatlyu.github.io/spEcula/reference/print.ecological_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"print ecological detector — print.ecological_detector","title":"print ecological detector — print.ecological_detector","text":"S3 method format output ecological detector ssh.test.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.ecological_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print ecological detector — print.ecological_detector","text":"","code":"# S3 method for ecological_detector print(x, ...)"},{"path":"https://spatlyu.github.io/spEcula/reference/print.ecological_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print ecological detector — print.ecological_detector","text":"x Return ssh.test. ... arguments.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.ecological_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print ecological detector — print.ecological_detector","text":"Formatted string output","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.ecological_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"print ecological detector — print.ecological_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.factor_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"print factor detector — print.factor_detector","title":"print factor detector — print.factor_detector","text":"S3 method format output factor detector ssh.test.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.factor_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print factor detector — print.factor_detector","text":"","code":"# S3 method for factor_detector print(x, ...)"},{"path":"https://spatlyu.github.io/spEcula/reference/print.factor_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print factor detector — print.factor_detector","text":"x Return ssh.test. ... arguments.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.factor_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print factor detector — print.factor_detector","text":"Formatted string output","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.factor_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"print factor detector — print.factor_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.interaction_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"print interaction detector — print.interaction_detector","title":"print interaction detector — print.interaction_detector","text":"S3 method format output interaction detector ssh.test.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.interaction_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print interaction detector — print.interaction_detector","text":"","code":"# S3 method for interaction_detector print(x, ...)"},{"path":"https://spatlyu.github.io/spEcula/reference/print.interaction_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print interaction detector — print.interaction_detector","text":"x Return ssh.test. ... arguments.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.interaction_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print interaction detector — print.interaction_detector","text":"Formatted string output","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.interaction_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"print interaction detector — print.interaction_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.risk_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"print risk detector — print.risk_detector","title":"print risk detector — print.risk_detector","text":"S3 method format output risk detector ssh.test.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.risk_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print risk detector — print.risk_detector","text":"","code":"# S3 method for risk_detector print(x, ...)"},{"path":"https://spatlyu.github.io/spEcula/reference/print.risk_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print risk detector — print.risk_detector","text":"x Return ssh.test. ... arguments.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.risk_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print risk detector — print.risk_detector","text":"Formatted string output","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/print.risk_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"print risk detector — print.risk_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":null,"dir":"Reference","previous_headings":"","what":"risk detector — risk_detector","title":"risk detector — risk_detector","text":"Determine whether significant difference attribute means two subregions.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"risk detector — risk_detector","text":"","code":"risk_detector(y, x, alpha = 0.95)"},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"risk detector — risk_detector","text":"y Variable Y, continuous numeric vector. x Covariate X, factor, character discrete numeric. alpha (optional) Confidence level interval,default 0.95.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"risk detector — risk_detector","text":"tibble contains different combinations covariate X level student t-test statistics, degrees freedom, p-values, whether risk (Yes ).","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"risk detector — risk_detector","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/risk_detector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"risk detector — risk_detector","text":"","code":"risk_detector(x = c('x',rep('y',3),rep('z',3)),y = 1:7) #> # A tibble: 6 × 6 #>   zone1 zone2 `T-statistic` `Degree-freedom` `P-value` Risk  #>   <chr> <chr>         <dbl>            <dbl>     <dbl> <fct> #> 1 x     y              0                   0    1      No    #> 2 x     z              0                   0    1      No    #> 3 y     x              0                   0    1      No    #> 4 y     z             -3.67                4    0.0213 Yes   #> 5 z     x              0                   0    1      No    #> 6 z     y              3.67                4    0.0213 Yes"},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":null,"dir":"Reference","previous_headings":"","what":"sandwich mapping model — sandwich","title":"sandwich mapping model — sandwich","text":"Spatial prediction based spatial stratified heterogeneity using sandwich mapping model.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sandwich mapping model — sandwich","text":"","code":"sandwich(   sampling,   stratification,   reporting,   sampling_attr,   ssh_zone,   reporting_id,   weight_type = \"area\" )"},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sandwich mapping model — sandwich","text":"sampling Sampling layer, spatial point vector object sf can converted sf object. stratification Stratification layer, spatial polygon vector object sf can converted sf object. reporting Reporting layer, spatial polygon vector object sf can converted sf object. sampling_attr attribute column sampling point sampling layer. ssh_zone zone column stratification layer. reporting_id id column reporting layer. weight_type (optional) Geographic area based weight(area) indicate human population size(population) , Default area.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sandwich mapping model — sandwich","text":"sf object estimated mean sandwichest_mean standard error sandwichest_standarderror.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"sandwich mapping model — sandwich","text":"Lin, Y., Xu, C., & Wang, J. (2023). sandwichr: Spatial prediction R based spatial stratified heterogeneity. Transactions GIS: TG, 27(5), 1579–1598. https://doi.org/10.1111/tgis.13088","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sandwich mapping model — sandwich","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/sandwich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sandwich mapping model — sandwich","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE simpath = system.file(\"extdata\", \"sim.gpkg\", package=\"spEcula\") sampling = read_sf(simpath,layer = 'sim_sampling') ssh = read_sf(simpath,layer = 'sim_ssh') reporting = read_sf(simpath,layer = 'sim_reporting') sandwich(sampling = sampling,stratification = ssh,reporting = reporting,         sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',         weight_type = 'population') #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Simple feature collection with 7 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 #> Geodetic CRS:  WGS 84 #> # A tibble: 7 × 4 #>       Y sandwichest_mean sandwichest_standarderror                      geometry #>   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> #> 1     1            NaN                      NaN    ((0.8 4, 0.8 4, 1 4, 1.2 4, … #> 2     2            266.                       2.11 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… #> 3     3            311.                       2.42 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… #> 4     4            413.                       3.06 ((4 3.6, 4 3.8, 4 4, 4 4.2, … #> 5     5            NaN                      NaN    ((1 3.6, 1 3.4, 1.2 3.4, 1.4… #> 6     6            NaN                      NaN    ((1.6 3, 1.6 2.8, 1.8 2.8, 2… #> 7     7             93.8                      2.85 ((0.6 5, 0.6 5, 0.6 5.2, 0.6… sandwich(sampling = sampling,stratification = ssh,reporting = reporting,         sampling_attr = 'Value',ssh_zone = 'X',reporting_id = 'Y',         weight_type = 'area') #> Warning: attribute variables are assumed to be spatially constant throughout all geometries #> Simple feature collection with 7 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 5.684342e-14 ymin: 2 xmax: 4 ymax: 6 #> Geodetic CRS:  WGS 84 #> # A tibble: 7 × 4 #>       Y sandwichest_mean sandwichest_standarderror                      geometry #>   <dbl>            <dbl>                     <dbl>                 <POLYGON [°]> #> 1     1             381.                      2.43 ((0.8 4, 0.8 4, 1 4, 1.2 4, … #> 2     2             262.                      2.10 ((2.8 6, 2.6 6, 2.4 6, 2.2 6… #> 3     3             298.                      2.49 ((2.4 3, 2.4 2.8, 2.2 2.8, 2… #> 4     4             401.                      2.88 ((4 3.6, 4 3.8, 4 4, 4 4.2, … #> 5     5             390.                      2.53 ((1 3.6, 1 3.4, 1.2 3.4, 1.4… #> 6     6             357.                      2.15 ((1.6 3, 1.6 2.8, 1.8 2.8, 2… #> 7     7             203.                      2.40 ((0.6 5, 0.6 5, 0.6 5.2, 0.6…"},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":null,"dir":"Reference","previous_headings":"","what":"spatial stratified heterogeneity test — ssh.test","title":"spatial stratified heterogeneity test — ssh.test","text":"Spatial stratified heterogeneity test based geographic detector.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatial stratified heterogeneity test — ssh.test","text":"","code":"ssh.test(formula, data, type = \"factor\", ...)"},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spatial stratified heterogeneity test — ssh.test","text":"formula formula spatial stratified heterogeneity test. data data.frame tibble observation data. type (optional) type geographical detector,must one factor(default), interaction, risk, ecological. ... (optional) Specifies size alpha (confidence level).Default 0.95.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spatial stratified heterogeneity test — ssh.test","text":"tibble corresponding result stored corresponding detector type.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spatial stratified heterogeneity test — ssh.test","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/ssh.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"spatial stratified heterogeneity test — ssh.test","text":"","code":"ssh.test(y ~ x1 + x2,          tibble::tibble(y = 1:7,          x1 = c('x',rep('y',3),rep('z',3)),          x2 = c(rep('a',2),rep('b',2),rep('c',3)))) #> Spatial Stratified Heterogeneity Test  #>   #>           Factor detector          #>  #> ---------------------------------- #>  variable   Q-statistic   P-value  #> ---------- ------------- --------- #>     x2        0.8929      0.03168  #>  #>     x1        0.7714      0.07936  #> ---------------------------------- #>   ssh.test(y ~ x1 + x2,          tibble::tibble(y = 1:7,                         x1 = c('x',rep('y',3),rep('z',3)),                         x2 = c(rep('a',2),rep('b',2),rep('c',3))),          type = 'interaction') #> Spatial Stratified Heterogeneity Test  #>   #>          Interaction detector           #>  #> ------------------------------------------ #>  Interactive variable      Interaction     #> ---------------------- ------------------- #>        x1 ∩ x2          Weaken, nonlinear  #> ------------------------------------------ #>   ssh.test(y ~ x1 + x2,          tibble::tibble(y = 1:7,                         x1 = c('x',rep('y',3),rep('z',3)),                         x2 = c(rep('a',2),rep('b',2),rep('c',3))),          type = 'risk',alpha = 0.95) #> Spatial Stratified Heterogeneity Test  #>   #>              Risk detector              #>  #> -------------------------------------- #> Variable x1: #>  #> |   |x  |y   |z   | #> |:--|:--|:---|:---| #> |x  |NA |No  |No  | #> |y  |No |NA  |Yes | #> |z  |No |Yes |NA  | #> -------------------------------------- #> Variable x2: #>  #> |   |a   |b   |c   | #> |:--|:---|:---|:---| #> |a  |NA  |No  |Yes | #> |b  |No  |NA  |Yes | #> |c  |Yes |Yes |NA  |  ssh.test(y ~ x1 + x2,          tibble::tibble(y = 1:7,                         x1 = c('x',rep('y',3),rep('z',3)),                         x2 = c(rep('a',2),rep('b',2),rep('c',3))),          type = 'ecological',alpha = 0.95) #> Spatial Stratified Heterogeneity Test  #>   #>           ecological detector           #>  #> -------------------------------------- #>  #>  #> |   |x2 | #> |:--|:--| #> |x1 |No |"},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":null,"dir":"Reference","previous_headings":"","what":"spatial datasets of trace element Zn — zn","title":"spatial datasets of trace element Zn — zn","text":"Spatial datasets trace element Zn,modified geosimilarity package.","code":""},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatial datasets of trace element Zn — zn","text":"","code":"zn"},{"path":"https://spatlyu.github.io/spEcula/reference/zn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"spatial datasets of trace element Zn — zn","text":"zn: tibble trace element Zn 885 rows 12 variables","code":""},{"path":"https://spatlyu.github.io/spEcula/news/index.html","id":"specula-development-version","dir":"Changelog","previous_headings":"","what":"spEcula (development version)","title":"spEcula (development version)","text":"support advanced spatial methods.","code":""},{"path":"https://spatlyu.github.io/spEcula/news/index.html","id":"specula-012","dir":"Changelog","previous_headings":"","what":"spEcula 0.1.2","title":"spEcula 0.1.2","text":"Support GOS sandwich mapping model.","code":""}]
